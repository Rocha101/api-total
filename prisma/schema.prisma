generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  COACH
  CUSTOMER
}

model Account {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String?
  password          String
  accountType       AccountType
  protocols         Protocol[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  meals             Meal[]
  trains            Train[]
  exercises         Exercise[]
  hormones          Hormone[]
  extraCompounds    ExtraCompounds[]
  diets             Diet[]
  hormonalProtocols HormonalProtocol[]
  coach             Account?           @relation("CoachAccount", fields: [coachId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  coachId           String?
  clients           Account[]          @relation("CoachAccount")
  foods             Food[]
  subscriptions     Subscription[]
  plans             Plan[]
  notification      Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String?
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String
}

model Subscription {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  account   Account?  @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String?
  expiresAt DateTime?
  plan      Plan?     @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId    String?
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  duration      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  account       Account?       @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId     String?
  subscriptions Subscription[]
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Train {
  id          String     @id @default(cuid())
  name        String
  description String?
  exercises   Exercise[]
  weekDays    WeekDay[]
  protocols   Protocol[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  account     Account    @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId   String
}

enum ExerciseType {
  CARDIO
  STRETCHING
  STRENGHT
}

model Reps {
  id        String   @id @default(cuid())
  quantity  Int
  weight    Float
  setType   SetType?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sets      Sets     @relation(fields: [setsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  setsId    String
}

enum SetType {
  WARM_UP
  WORKING
  FEEDER
  TOP
  BACK_OFF
}

model Sets {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  exerciseId String
  reps       Reps[]
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  CALVES
  ABS
  QUADS
  HAMSTRINGS
  GLUTES
  ADDUCTORS
  ABDUCTORS
  TRAPS
  LATS
  LOWER_BACK
  OBLIQUES
  NECK
}

model Exercise {
  id          String        @id @default(cuid())
  name        String
  description String?
  sets        Sets[]
  type        ExerciseType? @default(STRENGHT)
  muscleGroup MuscleGroup?
  equipment   String?
  trains      Train[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  account     Account       @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId   String
}

model Diet {
  id          String     @id @default(cuid())
  name        String
  description String?
  meals       Meal[]
  protocols   Protocol[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  account     Account    @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId   String
}

enum MealUnit {
  GR
  ML
  UNIT
}

enum MealType {
  BREAKFAST
  MORNING_SNACK
  LUNCH
  AFTERNOON_SNACK
  DINNER
}

model Meal {
  id            String   @id @default(cuid())
  name          String
  description   String?
  foods         Food[]
  mealType      MealType
  totalCalories Float?
  totalProteins Float?
  totalCarbs    Float?
  totalFats     Float?
  diets         Diet[]
  account       Account  @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Food {
  id          String    @id @default(cuid())
  name        String
  description String?
  quantity    Float?
  unit        MealUnit?
  calories    Float?
  proteins    Float?
  carbs       Float?
  fats        Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  meals       Meal[]
  account     Account?  @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId   String?
}

enum HormoneType {
  NINETEEN_NOR
  DHT
  TESTOSTERONE
  PEPTIDE
  INSULIN
  TIREOID
}

enum HormoneUnit {
  MG
  ML
  UI
  UNIT
}

model Hormone {
  id                String             @id @default(cuid())
  name              String
  description       String?
  quantity          Float
  concentration     Float?
  unit              HormoneUnit
  concentrationUnit ConcentrationUnit?
  hormoneType       HormoneType
  hormonalProtocols HormonalProtocol[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  account           Account?           @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId         String?
}

model ExtraCompounds {
  id                String             @id @default(cuid())
  name              String
  description       String?
  quantity          Float
  concentration     Float?
  unit              HormoneUnit
  concentrationUnit ConcentrationUnit?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  protocols         Protocol[]
  account           Account?           @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId         String?
}

model HormonalProtocol {
  id          String     @id @default(cuid())
  name        String
  description String?
  hormones    Hormone[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  protocols   Protocol[]
  account     Account?   @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId   String?
}

enum ConcentrationUnit {
  MG_ML
  MG
}

model Protocol {
  id                String             @id @default(cuid())
  name              String
  description       String?
  hormonalProtocols HormonalProtocol[]
  trains            Train[]
  diets             Diet[]
  extraCompounds    ExtraCompounds[]
  account           Account?           @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId         String?
  clientId          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}
